// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"
	"user-service/internal/data/ent/schema"
	"user-service/internal/data/ent/user"
	"user-service/internal/data/ent/usergroup"
	"user-service/internal/data/ent/userlog"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescGroupID is the schema descriptor for group_id field.
	userDescGroupID := userFields[1].Descriptor()
	// user.DefaultGroupID holds the default value on creation for the group_id field.
	user.DefaultGroupID = userDescGroupID.Default.(int32)
	// userDescMobile is the schema descriptor for mobile field.
	userDescMobile := userFields[4].Descriptor()
	// user.DefaultMobile holds the default value on creation for the mobile field.
	user.DefaultMobile = userDescMobile.Default.(string)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[5].Descriptor()
	// user.DefaultEmail holds the default value on creation for the email field.
	user.DefaultEmail = userDescEmail.Default.(string)
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescCreateTime is the schema descriptor for create_time field.
	userDescCreateTime := userFields[6].Descriptor()
	// user.DefaultCreateTime holds the default value on creation for the create_time field.
	user.DefaultCreateTime = userDescCreateTime.Default.(func() time.Time)
	// userDescUpdateTime is the schema descriptor for update_time field.
	userDescUpdateTime := userFields[7].Descriptor()
	// user.DefaultUpdateTime holds the default value on creation for the update_time field.
	user.DefaultUpdateTime = userDescUpdateTime.Default.(func() time.Time)
	// user.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	user.UpdateDefaultUpdateTime = userDescUpdateTime.UpdateDefault.(func() time.Time)
	usergroupFields := schema.UserGroup{}.Fields()
	_ = usergroupFields
	// usergroupDescCreateTime is the schema descriptor for create_time field.
	usergroupDescCreateTime := usergroupFields[2].Descriptor()
	// usergroup.DefaultCreateTime holds the default value on creation for the create_time field.
	usergroup.DefaultCreateTime = usergroupDescCreateTime.Default.(func() time.Time)
	// usergroup.UpdateDefaultCreateTime holds the default value on update for the create_time field.
	usergroup.UpdateDefaultCreateTime = usergroupDescCreateTime.UpdateDefault.(func() time.Time)
	userlogFields := schema.UserLog{}.Fields()
	_ = userlogFields
	// userlogDescIP is the schema descriptor for ip field.
	userlogDescIP := userlogFields[2].Descriptor()
	// userlog.DefaultIP holds the default value on creation for the ip field.
	userlog.DefaultIP = userlogDescIP.Default.(string)
	// userlogDescCreateTime is the schema descriptor for create_time field.
	userlogDescCreateTime := userlogFields[3].Descriptor()
	// userlog.DefaultCreateTime holds the default value on creation for the create_time field.
	userlog.DefaultCreateTime = userlogDescCreateTime.Default.(func() time.Time)
	// userlog.UpdateDefaultCreateTime holds the default value on update for the create_time field.
	userlog.UpdateDefaultCreateTime = userlogDescCreateTime.UpdateDefault.(func() time.Time)
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"user-service/internal/data/ent/user"
	"user-service/internal/data/ent/userlog"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserLogCreate is the builder for creating a UserLog entity.
type UserLogCreate struct {
	config
	mutation *UserLogMutation
	hooks    []Hook
}

// SetIP sets the "ip" field.
func (ulc *UserLogCreate) SetIP(s string) *UserLogCreate {
	ulc.mutation.SetIP(s)
	return ulc
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (ulc *UserLogCreate) SetNillableIP(s *string) *UserLogCreate {
	if s != nil {
		ulc.SetIP(*s)
	}
	return ulc
}

// SetExtra sets the "extra" field.
func (ulc *UserLogCreate) SetExtra(s string) *UserLogCreate {
	ulc.mutation.SetExtra(s)
	return ulc
}

// SetNillableExtra sets the "extra" field if the given value is not nil.
func (ulc *UserLogCreate) SetNillableExtra(s *string) *UserLogCreate {
	if s != nil {
		ulc.SetExtra(*s)
	}
	return ulc
}

// SetCreateTime sets the "create_time" field.
func (ulc *UserLogCreate) SetCreateTime(t time.Time) *UserLogCreate {
	ulc.mutation.SetCreateTime(t)
	return ulc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ulc *UserLogCreate) SetNillableCreateTime(t *time.Time) *UserLogCreate {
	if t != nil {
		ulc.SetCreateTime(*t)
	}
	return ulc
}

// SetID sets the "id" field.
func (ulc *UserLogCreate) SetID(i int64) *UserLogCreate {
	ulc.mutation.SetID(i)
	return ulc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ulc *UserLogCreate) SetOwnerID(id int64) *UserLogCreate {
	ulc.mutation.SetOwnerID(id)
	return ulc
}

// SetOwner sets the "owner" edge to the User entity.
func (ulc *UserLogCreate) SetOwner(u *User) *UserLogCreate {
	return ulc.SetOwnerID(u.ID)
}

// Mutation returns the UserLogMutation object of the builder.
func (ulc *UserLogCreate) Mutation() *UserLogMutation {
	return ulc.mutation
}

// Save creates the UserLog in the database.
func (ulc *UserLogCreate) Save(ctx context.Context) (*UserLog, error) {
	var (
		err  error
		node *UserLog
	)
	ulc.defaults()
	if len(ulc.hooks) == 0 {
		if err = ulc.check(); err != nil {
			return nil, err
		}
		node, err = ulc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ulc.check(); err != nil {
				return nil, err
			}
			ulc.mutation = mutation
			if node, err = ulc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ulc.hooks) - 1; i >= 0; i-- {
			if ulc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ulc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ulc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ulc *UserLogCreate) SaveX(ctx context.Context) *UserLog {
	v, err := ulc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ulc *UserLogCreate) Exec(ctx context.Context) error {
	_, err := ulc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ulc *UserLogCreate) ExecX(ctx context.Context) {
	if err := ulc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ulc *UserLogCreate) defaults() {
	if _, ok := ulc.mutation.IP(); !ok {
		v := userlog.DefaultIP
		ulc.mutation.SetIP(v)
	}
	if _, ok := ulc.mutation.Extra(); !ok {
		v := userlog.DefaultExtra
		ulc.mutation.SetExtra(v)
	}
	if _, ok := ulc.mutation.CreateTime(); !ok {
		v := userlog.DefaultCreateTime()
		ulc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ulc *UserLogCreate) check() error {
	if _, ok := ulc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "UserLog.ip"`)}
	}
	if _, ok := ulc.mutation.Extra(); !ok {
		return &ValidationError{Name: "extra", err: errors.New(`ent: missing required field "UserLog.extra"`)}
	}
	if _, ok := ulc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "UserLog.create_time"`)}
	}
	if _, ok := ulc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "UserLog.owner"`)}
	}
	return nil
}

func (ulc *UserLogCreate) sqlSave(ctx context.Context) (*UserLog, error) {
	_node, _spec := ulc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ulc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (ulc *UserLogCreate) createSpec() (*UserLog, *sqlgraph.CreateSpec) {
	var (
		_node = &UserLog{config: ulc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userlog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userlog.FieldID,
			},
		}
	)
	if id, ok := ulc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ulc.mutation.IP(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlog.FieldIP,
		})
		_node.IP = value
	}
	if value, ok := ulc.mutation.Extra(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlog.FieldExtra,
		})
		_node.Extra = value
	}
	if value, ok := ulc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userlog.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if nodes := ulc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userlog.OwnerTable,
			Columns: []string{userlog.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserLogCreateBulk is the builder for creating many UserLog entities in bulk.
type UserLogCreateBulk struct {
	config
	builders []*UserLogCreate
}

// Save creates the UserLog entities in the database.
func (ulcb *UserLogCreateBulk) Save(ctx context.Context) ([]*UserLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ulcb.builders))
	nodes := make([]*UserLog, len(ulcb.builders))
	mutators := make([]Mutator, len(ulcb.builders))
	for i := range ulcb.builders {
		func(i int, root context.Context) {
			builder := ulcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ulcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ulcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ulcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ulcb *UserLogCreateBulk) SaveX(ctx context.Context) []*UserLog {
	v, err := ulcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ulcb *UserLogCreateBulk) Exec(ctx context.Context) error {
	_, err := ulcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ulcb *UserLogCreateBulk) ExecX(ctx context.Context) {
	if err := ulcb.Exec(ctx); err != nil {
		panic(err)
	}
}
